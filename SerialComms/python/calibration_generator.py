"""
MASA calibration generator script

Michigan Aeronautical Science Association
Author: Nathaniel Kalantar (nkalan@umich.edu)
Created: April 13, 2021
"""

import pandas as pd
import sys
import time

def main():
    # Argument parsing and error checking
    if (len(sys.argv) != 3):
        print("Error: incorrect number of arguments. Proper usage is: calibration_generator.py <calibration csv> <board number>")
        return

    file_name = sys.argv[1]
    board_num = int(sys.argv[2])

    # Hardcoding file destinations: TODO change this?
    cal_hdest = "../../../Inc/calibrations.h"
    cal_cdest = "../../../Src/calibrations.c"

    # Read in the csv with pandas
    df = pd.read_csv(file_name)

    # Defining some helpful data structures
    cal_dict = dict()  # Mapping device type to a dictionary of lists of calibration values
    cal_vartype_dict = dict()  # Mapping device name to C calibration variable type

    # Iterate through each row in the csv and fill the calibration dictionaries
    for index, cal in df.iterrows():

        # Ignore rows not matching the board you want
        if cal['Board'] != board_num:
            continue

        # Create a new set of lists for a new device
        if cal['Device'] not in cal_dict.keys():
            cal_dict[cal['Device']] = {'Slope': [],
                                        'Offset': [],
                                        'Ambients': []}

        # Read in the cal's variable type and error check for consistency
        if cal['Device'] not in cal_vartype_dict.keys():
            cal_vartype_dict[cal['Device']] = cal['Type']
        elif cal['Type'] != cal_vartype_dict[cal['Device']]:
            print("Error on line " + str(index + 2) + " of '" + file_name + "': variable type '" + str(cal['Type']) + "' is inconsistent with previous entries of type '" + str(cal['Device']) + "'.\n")
            return
        
        # Add the calibrations to the proper lists
        cal_dict[cal['Device']]['Slope'].append(cal['Slope'])
        cal_dict[cal['Device']]['Offset'].append(cal['Offset'])
        cal_dict[cal['Device']]['Ambients'].append(cal['Ambients'])

    # Start setting up string to write to the files
    # Not writing directly to files because it's easier this way trust me
    autogen_tag = "// AUTOGENERATED FILE - CHANGES MADE TO THIS FILE WILL BE OVERWRITTEN\n\n" \
        + "// Autogenerated by calibration_generator.py on " + str(time.ctime()) + "\n\n\n"
    cal_h_str = autogen_tag + "#ifndef CALIBRATIONS_H\n#define CALIBRATIONS_H\n\n"
    cal_c_str = autogen_tag + "#include \"calibrations.h\"\n\n"

    for device in cal_dict.keys():
        cal_h_str += "#define NUM_" + device.upper() + "_CALS\t\t" + str(len(cal_dict[device]['Slope'])) + "\n"
    cal_h_str += "\n"

    for device in cal_dict.keys():
        for cal_type, cals in cal_dict[device].items():
            # Declare cal array
            cal_h_str += "extern " + cal_vartype_dict[device] + " " + device + "_" + cal_type.lower() + "[" \
                + "NUM_" + device.upper() + "_CALS];\n\n"

            # Fill cal arrays
            cal_c_str += cal_vartype_dict[device] + " " + device + "_" + cal_type.lower() + "[" \
                + "NUM_" + device.upper() + "_CALS] = {\n"
            for index, cal in enumerate(cals):
                cal_c_str += "\t" + str(cal)
                if (index < len(cals)-1):  # No comma on last entry
                    cal_c_str += ","
                cal_c_str += "\n"
            cal_c_str += "};\n\n"

    # End header include protection
    cal_h_str += "#endif\n"

    # Write files
    with open(cal_hdest, 'w+') as cal_h_file:
        cal_h_file.write(cal_h_str)
    
    with open(cal_cdest, 'w+') as cal_c_file:
        cal_c_file.write(cal_c_str)

    print("Successfully generated the following files:\n\t" + cal_hdest + "\n\t" + cal_cdest)

if __name__ == '__main__':
    main()