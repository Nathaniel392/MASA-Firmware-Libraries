"""
MASA pressure transducer format and global variables generator script

Michigan Aeronautical Science Association
Author: Leif Gullstad (leifg@umich.edu)
Modified from telem_file_generator.py by Nathaniel Kalantar (nkalan@umich.edu)
Created: December 20, 2020 

Program expects input file to be a csv formatted as ID,Slope,offset
"""
import time
import sys
import csv

# Used to split() lines into columns
COLUMN_DELIMITER = ','

# Expected number of bytes for a given variable type
type_byte_lengths = {
    "char"		:	1,
    "uint8_t"	:	1,
    "int8_t"	:	1,
    "uint16_t"	:	2,
    "int16_t"	:	2,
    "uint32_t"	:	4,
    "int32_t"	:	4,
    "uint64_t"	:	8,
    "int64_t"	:	8
}

# Upper bound for a given variable type
type_range_positive = {
    "char"		:	255,
    "uint8_t"	:	(2**8)-1,
    "int8_t"	:	((2**8)/2)-1,
    "uint16_t"	:	(2**16)-1,
    "int16_t"	:	((2**16)/2)-1,
    "uint32_t"	:	(2**32)-1,
    "int32_t"	:	((2**32)/2)-1,
    "uint64_t"	:	(2**64)-1,
    "int64_t"	:	((2**64)/2)-1
}

# Lower bound for a given variable type
type_range_negative = {
    "char"		:	0,
    "uint8_t"	:	0,
    "int8_t"	:	-((2**8)/2),
    "uint16_t"	:	0,
    "int16_t"	:	-((2**16)/2),
    "uint32_t"	:	0,
    "int32_t"	:	-((2**32)/2),
    "uint64_t"	:	0,
    "int64_t"	:	-((2**64)/2)
}

# Used for parser_data_dict_str and telem_parser.py
# See https://docs.python.org/3/library/struct.html for details on byte formatting
type_unpack_arg = {
    "char"		:	"\"<c\"",
    "uint8_t"	:	"\"<B\"",
    "int8_t"	:	"\"<b\"",
    "uint16_t"	:	"\"<H\"",
    "int16_t"	:	"\"<h\"",
    "uint32_t"	:	"\"<I\"",
    "int32_t"	:	"\"<i\"",
    "uint64_t"	:	"\"<L\"",
    "int64_t"	:	"\"<l\"",
}

def main():

    # Autogeneration label and timestamp
    begin_autogen_tag = "/// BEGIN AUTOGENERATED SECTION - MODIFICATIONS TO THIS CODE WILL BE OVERWRITTEN\n"
    end_autogen_tag = "/// END AUTOGENERATED SECTION - USER CODE GOES BELOW THIS LINE\n"
    autogen_label = "/// Autogenerated by pt_calibration_generator.py on " + time.ctime()

    # Don't think I need to create a globals file
    # If globals needed, generate here

    # Struct definition
    struct_def = "struct Pt_calib {\n\tdouble slope;\n\tdouble offset;\n};"

    # Strings to hold what I want printed into the file
    pack_pt_calibration_h_str = ""
    pack_pt_calibration_c_str = ""

    pack_pt_calibration_h_str += begin_autogen_tag + "\n/// pack_pt_calibration.h\n" + autogen_label + "\n\n"
    pack_pt_calibration_h_str += struct_def + "\n\n"
    pack_pt_calibration_h_str += "extern void pt_calibration_data(struct Pt_calib* data);\n\n"
    pack_pt_calibration_h_str += "extern void update_temp(struct Pt_calib *temp, double slope, double offset);"


    pack_pt_calibration_c_str += begin_autogen_tag + "\n/// pack_pt_calibration.c\n" + autogen_label + "\n\n"

    pack_pt_calibration_c_str += "#include \"../inc/pack_pt_calibration.h\"\n\n"
    pack_pt_calibration_c_str += "struct Pt_calib temp;\n\n"
    pack_pt_calibration_c_str += "void update_temp(struct Pt_calib* temp, double slope_in, double offset_in) {\n" \
    + "\ttemp->slope = slope_in;\n\ttemp->offset = offset_in;\n}\n\n"
    pack_pt_calibration_c_str += "void pt_calibration_data(struct Pt_calib* data) {\n"

    pack_pt_calibration_h = open("../inc/pack_pt_calibration.h", "w+")
    pack_pt_calibration_h.write(pack_pt_calibration_h_str)
    # Loop through csv file using iterator
    # Hard coded filename. Should be passed in as command line arg
    channel_num = -1
    with open('pt_calibration.csv') as csvfile:
        data_iter = csv.reader(csvfile, delimiter = COLUMN_DELIMITER)
        for row in data_iter:
            if (channel_num == -1):
                pack_pt_calibration_c_str += "\t/// Column names are: " + str(row[0]) + "," + str(row[1]) + "," + str(row[2]) + "\n"
            else:
                pack_pt_calibration_c_str += "\tupdate_temp(&temp, " + str(row[1]) + ", " + str(row[2]) + ");\n"
                pack_pt_calibration_c_str += "\tdata[" + str(channel_num) + "] = temp;\n"
            channel_num += 1

    pack_pt_calibration_c_str += "}"
    pack_pt_calibration_c = open("../src/pack_pt_calibration.c", "w+")
    pack_pt_calibration_c.write(pack_pt_calibration_c_str)



if __name__ == '__main__':
    main()
