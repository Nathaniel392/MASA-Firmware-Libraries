"""
MASA pressure transducer format and global variables generator script

Michigan Aeronautical Science Association
Author: Leif Gullstad (leifg@umich.edu)
Modified from telem_file_generator.py by Nathaniel Kalantar (nkalan@umich.edu)
Created: December 20, 2020 

Program expects input file to be a csv formatted as ID,Slope,offset
"""
import time
import sys
import csv

# Used to split() lines into columns
COLUMN_DELIMITER = ','

# Expected number of bytes for a given variable type
type_byte_lengths = {
    "char"		:	1,
    "uint8_t"	:	1,
    "int8_t"	:	1,
    "uint16_t"	:	2,
    "int16_t"	:	2,
    "uint32_t"	:	4,
    "int32_t"	:	4,
    "uint64_t"	:	8,
    "int64_t"	:	8
}

# Upper bound for a given variable type
type_range_positive = {
    "char"		:	255,
    "uint8_t"	:	(2**8)-1,
    "int8_t"	:	((2**8)/2)-1,
    "uint16_t"	:	(2**16)-1,
    "int16_t"	:	((2**16)/2)-1,
    "uint32_t"	:	(2**32)-1,
    "int32_t"	:	((2**32)/2)-1,
    "uint64_t"	:	(2**64)-1,
    "int64_t"	:	((2**64)/2)-1
}

# Lower bound for a given variable type
type_range_negative = {
    "char"		:	0,
    "uint8_t"	:	0,
    "int8_t"	:	-((2**8)/2),
    "uint16_t"	:	0,
    "int16_t"	:	-((2**16)/2),
    "uint32_t"	:	0,
    "int32_t"	:	-((2**32)/2),
    "uint64_t"	:	0,
    "int64_t"	:	-((2**64)/2)
}

# Used for parser_data_dict_str and telem_parser.py
# See https://docs.python.org/3/library/struct.html for details on byte formatting
type_unpack_arg = {
    "char"		:	"\"<c\"",
    "uint8_t"	:	"\"<B\"",
    "int8_t"	:	"\"<b\"",
    "uint16_t"	:	"\"<H\"",
    "int16_t"	:	"\"<h\"",
    "uint32_t"	:	"\"<I\"",
    "int32_t"	:	"\"<i\"",
    "uint64_t"	:	"\"<L\"",
    "int64_t"	:	"\"<l\"",
}

def main():

    # Filename hardcoded for testing purposes
    # Should be a command line arg
    try:
        filename_in = "pt_calibration.csv"
        csv_row_iter = csv.reader(filename_in, COLUMN_DELIMITER)
        print("Reading " + filename_in + "...")
    except:
        print("Unable to open " + filename_in)

    # Autogeneration label and timestamp
    begin_autogen_tag = "/// BEGIN AUTOGENERATED SECTION - MODIFICATIONS TO THIS CODE WILL BE OVERWRITTEN\n"
    end_autogen_tag = "/// END AUTOGENERATED SECTION - USER CODE GOES BELOW THIS LINE\n"
    autogen_label = "/// Autogenerated by telem_defines_globals_generate.py on " + time.ctime()

    # Don't think I need to create a globals file
    # If globals needed, generate here

    # Strings to hold what I want printed into the file

    # Loop through csv file using iterator
    for row in csv_row_iter:
        if (row != 0): # Avoid trying to parse column header



if __name__ == '__main__':
    main()
